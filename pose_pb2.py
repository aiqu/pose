# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pose/pose.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='pose/pose.proto',
  package='aiqu',
  syntax='proto3',
  serialized_pb=_b('\n\x0fpose/pose.proto\x12\x04\x61iqu\"M\n\x04Pose\x12!\n\x0btranslation\x18\x01 \x01(\x0b\x32\x0c.aiqu.Point3\x12\"\n\x08rotation\x18\x02 \x01(\x0b\x32\x10.aiqu.Quaternion\")\n\x06Point3\x12\t\n\x01x\x18\x01 \x01(\x02\x12\t\n\x01y\x18\x02 \x01(\x02\x12\t\n\x01z\x18\x03 \x01(\x02\"<\n\nQuaternion\x12\n\n\x02qw\x18\x01 \x01(\x02\x12\n\n\x02qx\x18\x02 \x01(\x02\x12\n\n\x02qy\x18\x03 \x01(\x02\x12\n\n\x02qz\x18\x04 \x01(\x02\x62\x06proto3')
)




_POSE = _descriptor.Descriptor(
  name='Pose',
  full_name='aiqu.Pose',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='translation', full_name='aiqu.Pose.translation', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rotation', full_name='aiqu.Pose.rotation', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=102,
)


_POINT3 = _descriptor.Descriptor(
  name='Point3',
  full_name='aiqu.Point3',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='x', full_name='aiqu.Point3.x', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y', full_name='aiqu.Point3.y', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='z', full_name='aiqu.Point3.z', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=145,
)


_QUATERNION = _descriptor.Descriptor(
  name='Quaternion',
  full_name='aiqu.Quaternion',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='qw', full_name='aiqu.Quaternion.qw', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='qx', full_name='aiqu.Quaternion.qx', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='qy', full_name='aiqu.Quaternion.qy', index=2,
      number=3, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='qz', full_name='aiqu.Quaternion.qz', index=3,
      number=4, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=147,
  serialized_end=207,
)

_POSE.fields_by_name['translation'].message_type = _POINT3
_POSE.fields_by_name['rotation'].message_type = _QUATERNION
DESCRIPTOR.message_types_by_name['Pose'] = _POSE
DESCRIPTOR.message_types_by_name['Point3'] = _POINT3
DESCRIPTOR.message_types_by_name['Quaternion'] = _QUATERNION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Pose = _reflection.GeneratedProtocolMessageType('Pose', (_message.Message,), dict(
  DESCRIPTOR = _POSE,
  __module__ = 'pose.pose_pb2'
  # @@protoc_insertion_point(class_scope:aiqu.Pose)
  ))
_sym_db.RegisterMessage(Pose)

Point3 = _reflection.GeneratedProtocolMessageType('Point3', (_message.Message,), dict(
  DESCRIPTOR = _POINT3,
  __module__ = 'pose.pose_pb2'
  # @@protoc_insertion_point(class_scope:aiqu.Point3)
  ))
_sym_db.RegisterMessage(Point3)

Quaternion = _reflection.GeneratedProtocolMessageType('Quaternion', (_message.Message,), dict(
  DESCRIPTOR = _QUATERNION,
  __module__ = 'pose.pose_pb2'
  # @@protoc_insertion_point(class_scope:aiqu.Quaternion)
  ))
_sym_db.RegisterMessage(Quaternion)


# @@protoc_insertion_point(module_scope)
